version: '3.8'

services:
  # Vue.js 프론트엔드 앱 (프로덕션 빌드)
  vue-app:
    image: ${DOCKER_USERNAME:-shinil}/shinil-pms-frontend:latest
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
    networks:
      - shinil-network
    restart: unless-stopped
    depends_on:
      - api-server

  # Express API 서버 (프로덕션)
  api-server:
    image: ${DOCKER_USERNAME:-shinil}/shinil-pms-api:latest
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=shinil_pms
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - JWT_SECRET=${JWT_SECRET:-shinil-pms-secret-key-2024}
    networks:
      - shinil-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  # PostgreSQL 데이터베이스 (프로덕션)
  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=shinil_pms
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    networks:
      - shinil-network
    restart: unless-stopped
    command: >
      postgres
      -c wal_level=logical
      -c max_replication_slots=5
      -c max_wal_senders=10
      -c shared_preload_libraries=pg_stat_statements
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx 리버스 프록시 (선택사항)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    networks:
      - shinil-network
    restart: unless-stopped
    depends_on:
      - vue-app
      - api-server
    profiles:
      - proxy

volumes:
  postgres-data:

networks:
  shinil-network:
    driver: bridge 